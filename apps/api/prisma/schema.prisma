generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("password_hash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  tokens            Token[]
  accounts          Account[]
  invites           Invite[]
  member_on         Member[]
  owns_organization Organization[]
  owns_projects     Project[]

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GITHUB
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@map("accounts")
}

enum Role {
  ADMIN
  MEMBER
  BILLING
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  @@unique([email, organizationId])
  @@index([email])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id                        String   @id @default(uuid())
  name                      String
  slug                      String   @unique
  domain                    String?  @unique
  shouldAttachUserByDomain Boolean  @default(false) @map("sould_attach_user_by_domain")
  avatarUrl                 String?  @map("avatar_url")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("ownder_id")

  invites  Invite[]
  members  Member[]
  projects Project[]

  products Product[]
  services Service[]
  packages Package[]

  @@map("organizations")
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  slug        String   @unique
  avatarUrl   String?  @map("avatar_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @map("organization_id")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  @@map("projects")
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  price       Float
  price_cost  Float
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  organization_owner Organization @relation([fields: [organizationId], references: [id]])
  organizationId String @map("organization_id") @db.Uuid

  packages Package[]

  @@unique([name, organizationId])
  @@map("products")
}

model Service {
  id String @id @default(uuid()) @db.Uuid
  name String
  estimated_time String?
  price Float? @default(0)
  price_cost Float? @default(0)
  description String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  organization_owner Organization @relation([fields: [organizationId], references: [id]])
  organizationId String @map("organization_id") @db.Uuid

  @@unique([name, organizationId])
  @@map("services")
}

model Package {
  id String @id @default(uuid()) @db.Uuid
  name String
  price Float? @default(0)
  description String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  organization_owner Organization @relation([fields: [organizationId], references: [id]])
  organizationId String @map("organization_id") @db.Uuid

  groupsPackagesGroups  GroupsPackages[] @relation("PackageOrigin")
  groupsPackagesPackages GroupsPackages[] @relation("Package")

  @@unique([name, organizationId])
  @@map("packages")
}

model PackageService {
  id String @id @default(uuid()) @db.Uuid
  packageId String @map("package_id") @db.Uuid
  serviceId String @map("service_id") @db.Uuid

  package Package @relation([fields: [packageId], references: [id], onUpdate: Cascade, onDelete: Cascade])
  Service Service @relation([fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: Cascade])

  @@map("packages_services")
}

model PackageProduct {
  id String @id @default(uuid()) @db.Uuid
  packageId String @map("package_id") @db.Uuid
  productId String @map("product_id") @db.Uuid
  
  packages Package @relation([fields: [packageId], references: [id], onUpdate: Cascade, onDelete: Cascade])
  products Product @relation([fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade])

  @@map("packages_products")
}

model GroupPackage {
  id String @id @default(uuid()) @db.Uuid
  package_origin_id String @db.Uuid
  package_id String @db.Uuid
  deleted_at DateTime? @db.Timestamptz
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  packageOrigin Package @relation("PackageOrigin",[fields: [package_origin_id], references: [id], onUpdate: Cascade, onDelete: Cascade])
  packages Package @relation("Package", [fields: [package_id], references: [id], onUpdate: Cascade, onDelete: Cascade])

  @@map("groups_packages")
}